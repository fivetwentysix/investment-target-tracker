{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","extendMoment","Moment","numberWithCommas","x","toString","replace","App","props","date","startOf","toDate","endDate","endOf","localStorage","state","amount","target","holidays","handleChange","bind","handleChangeAmount","handleChangeHolidays","setStartDate","setEndDate","generateTable","buildRows","event","this","setState","value","rows","range","split","map","d","format","parseFloat","previous","by","day","weekday","includes","gain","push","data","row","key","toFixed","csvData","json2csv","parse","hasOwnProperty","className","onChange","htmlFor","id","type","selected","length","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4f3cd89e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.scss';\r\nimport DatePicker from 'react-datepicker';\r\nimport Moment from 'moment';\r\nimport json2csv from 'json2csv';\r\nimport { extendMoment } from 'moment-range';\r\nimport { CSVLink } from \"react-csv\";\r\nconst moment = extendMoment(Moment);\r\n\r\nfunction numberWithCommas(x) {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let date = moment().startOf('year').toDate();\r\n    let endDate = moment().endOf('year').toDate();\r\n\r\n    if (localStorage['date']) {\r\n      date = moment(localStorage['date']).toDate();\r\n    }\r\n\r\n    if (localStorage['endDate']) {\r\n      endDate = moment(localStorage['endDate']).toDate();\r\n    }\r\n\r\n    this.state = {\r\n      amount: localStorage['amount'] || \"10000\",\r\n      target: localStorage['target'] || \"2.00\",\r\n      date,\r\n      endDate,\r\n      holidays: localStorage['holidays'] || `January 1, 2020\r\nJanuary 20, 2020\r\nFebruary 17, 2020\r\nApril 10, 2020\r\nMay 25, 2020\r\nJuly 3, 2020\r\nSeptember 7, 2020\r\nNovember 26, 2020\r\nNovember 27, 2020\r\nDecember 24, 2020\r\nDecember 25, 2020`\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleChangeAmount = this.handleChangeAmount.bind(this);\r\n    this.handleChangeHolidays = this.handleChangeHolidays.bind(this);\r\n    this.setStartDate = this.setStartDate.bind(this);\r\n    this.setEndDate = this.setEndDate.bind(this);\r\n    this.generateTable = this.generateTable.bind(this);\r\n    this.buildRows = this.buildRows.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({target: event.target.value});\r\n  }\r\n\r\n  handleChangeAmount(event) {\r\n    this.setState({amount: event.target.value});\r\n  }\r\n\r\n  handleChangeHolidays(event) {\r\n    this.setState({holidays: event.target.value});\r\n  }\r\n\r\n  buildRows() {\r\n    const rows = [];\r\n\r\n    const range = moment.range(this.state.date, this.state.endDate);\r\n    const holidays = this.state.holidays.split(\"\\n\").map(d => {\r\n      return moment(d).format('YYYY-MM-DD');\r\n    })\r\n    let target = parseFloat(this.state.amount);\r\n    let previous = target;\r\n\r\n    for (let day of range.by('day')) {\r\n      const weekday = day.weekday();\r\n      const format = day.format('YYYY-MM-DD');\r\n      if (weekday !== 6 && weekday !== 0 && !holidays.includes(format)) {\r\n        const gain = target - previous;\r\n        rows.push({date: format, target, gain});\r\n\r\n        previous = target\r\n        target = target * (this.state.target / 100) + target\r\n      }\r\n    }\r\n\r\n    return rows;\r\n  }\r\n  generateTable() {\r\n    const rows = this.buildRows();\r\n    this.setState({rows})\r\n  }\r\n\r\n  setStartDate(date) {\r\n    this.setState({date});\r\n  }\r\n\r\n  setEndDate(endDate) {\r\n    this.setState({endDate});\r\n  }\r\n\r\n  render () {\r\n    const data = this.buildRows();\r\n    const rows = data.map(row => (\r\n      <tr key={row.date}>\r\n        <td>{row.date}</td>\r\n        <td>${numberWithCommas(row.target.toFixed(2))}</td>\r\n        <td>${numberWithCommas(row.gain.toFixed(2))}</td>\r\n      </tr>\r\n    ));\r\n    const csvData = json2csv.parse(data);\r\n    \r\n    // Save state to localStorage\r\n    for (const key in this.state) {\r\n      if (this.state.hasOwnProperty(key)) {\r\n        localStorage[key] = this.state[key];\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Investment Target Tracker</h1>\r\n\r\n        <p><i>Because trading without a plan is for bozos.</i></p>\r\n\r\n        <p><small>Saves to local storage in your web browser. Nothing is tracked or saved on the server.</small></p>\r\n  \r\n        <form onChange={this.generateTable}>\r\n          <div>\r\n            <label htmlFor=\"input-target\">Amount:</label> <input id=\"input-target\" value={this.state.amount} onChange={this.handleChangeAmount} type=\"text\" />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"input-target\">Target % Daily Gain:</label> <input id=\"input-target\" value={this.state.target} onChange={this.handleChange} type=\"text\" />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"input-date\">Start Date:</label> <DatePicker id=\"input-date\" selected={this.state.date} onChange={date => this.setStartDate(date)} />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"input-enddate\">End Date:</label> <DatePicker id=\"input-date\" selected={this.state.endDate} onChange={date => this.setEndDate(date)} />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"input-holidays\">Public Holidays (Default Nasdaq 2020):</label> <textarea id=\"input-holidays\" rows=\"11\" value={this.state.holidays} onChange={this.handleChangeHolidays} />\r\n          </div>\r\n        </form>\r\n        <p>Trading days: {rows.length}</p>\r\n\r\n        <CSVLink data={csvData}>Download CSV</CSVLink>       \r\n\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Target</th>\r\n              <th>Gain Required</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {rows}\r\n          </tbody>\r\n        </table>\r\n  \r\n        <small>Created by <a href=\"https://fivetwentysix.com\">@fivetwentysix</a></small>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}