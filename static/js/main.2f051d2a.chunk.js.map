{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","extendMoment","Moment","App","props","state","amount","target","date","Date","holidays","handleChange","bind","handleChangeAmount","handleChangeHolidays","setStartDate","generateTable","buildRows","event","this","setState","value","rows","range","split","map","d","format","parseFloat","by","day","weekday","includes","push","row","key","toFixed","toString","replace","className","onChange","for","id","type","selected","length","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAKMA,EAASC,uBAAaC,K,IA0HbC,E,YAnHb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,OAAQ,QACRC,OAAQ,OACRC,KAAM,IAAIC,KACVC,SAAS,mMAYX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,mBAAqB,EAAKA,mBAAmBD,KAAxB,gBAC1B,EAAKE,qBAAuB,EAAKA,qBAAqBF,KAA1B,gBAC5B,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,gBACrB,EAAKK,UAAY,EAAKA,UAAUL,KAAf,gBAvBA,E,0EA0BNM,GACXC,KAAKC,SAAS,CAACb,OAAQW,EAAMX,OAAOc,U,yCAGnBH,GACjBC,KAAKC,SAAS,CAACd,OAAQY,EAAMX,OAAOc,U,2CAGjBH,GACnBC,KAAKC,SAAS,CAACV,SAAUQ,EAAMX,OAAOc,U,kCAItC,IAAMC,EAAO,GAEPC,EAAQvB,EAAOuB,MAAMJ,KAAKd,MAAMG,KAAM,cACtCE,EAAWS,KAAKd,MAAMK,SAASc,MAAM,MAAMC,KAAI,SAAAC,GACnD,OAAO1B,EAAO0B,GAAGC,OAAO,iBAGtBpB,EAASqB,WAAWT,KAAKd,MAAMC,QARzB,uBASV,YAAgBiB,EAAMM,GAAG,OAAzB,+CAAiC,CAAC,IAAzBC,EAAwB,QACzBC,EAAUD,EAAIC,UACdJ,EAASG,EAAIH,OAAO,cACV,IAAZI,GAA6B,IAAZA,GAAkBrB,EAASsB,SAASL,KACvDL,EAAKW,KAAK,CAACzB,KAAMmB,EAAQpB,WAEzBA,EAASA,GAAUY,KAAKd,MAAME,OAAS,KAAOA,IAfxC,kFAmBV,OAAOe,I,sCAGP,IAAMA,EAAOH,KAAKF,YAClBE,KAAKC,SAAS,CAACE,W,mCAGJd,GACXW,KAAKC,SAAS,CAACZ,W,+BAGN,IAAD,OACFc,EAAOH,KAAKF,YAAYQ,KAAI,SAAAS,GAAG,OACnC,wBAAIC,IAAKD,EAAI1B,MACX,4BAAK0B,EAAI1B,MACT,gCAAuB0B,EAAI3B,OAAO6B,QAAQ,GA5EvCC,WAAWC,QAAQ,wBAAyB,UA+EnD,OACE,yBAAKC,UAAU,OACb,kDAEA,2EAEA,0BAAMC,SAAUrB,KAAKH,eACnB,6BACE,2BAAOyB,IAAI,gBAAX,WADF,IAC4C,2BAAOC,GAAG,eAAerB,MAAOF,KAAKd,MAAMC,OAAQkC,SAAUrB,KAAKN,mBAAoB8B,KAAK,UAEvI,6BACE,2BAAOF,IAAI,gBAAX,WADF,IAC4C,2BAAOC,GAAG,eAAerB,MAAOF,KAAKd,MAAME,OAAQiC,SAAUrB,KAAKR,aAAcgC,KAAK,UAEjI,6BACE,2BAAOF,IAAI,cAAX,eADF,IAC8C,kBAAC,IAAD,CAAYC,GAAG,aAAaE,SAAUzB,KAAKd,MAAMG,KAAMgC,SAAU,SAAAhC,GAAI,OAAI,EAAKO,aAAaP,OAEzI,6BACE,2BAAOiC,IAAI,kBAAX,0CADF,IAC6E,8BAAUC,GAAG,iBAAiBpB,KAAK,KAAKD,MAAOF,KAAKd,MAAMK,SAAU8B,SAAUrB,KAAKL,yBAGlK,4CAAkBQ,EAAKuB,QACvB,+BACE,+BACE,4BACE,oCACA,wCAGJ,+BACGvB,IAIL,6CAAkB,uBAAGwB,KAAK,6BAAR,wB,GA7GRC,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2f051d2a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport DatePicker from 'react-datepicker';\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\nconst moment = extendMoment(Moment);\n\nfunction numberWithCommas(x) {\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      amount: \"10000\",\n      target: \"2.00\",\n      date: new Date(),\n      holidays: `January 1, 2020\nJanuary 20, 2020\nFebruary 17, 2020\nApril 10, 2020\nMay 25, 2020\nJuly 3, 2020\nSeptember 7, 2020\nNovember 26, 2020\nNovember 27, 2020\nDecember 24, 2020\nDecember 25, 2020`\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleChangeAmount = this.handleChangeAmount.bind(this);\n    this.handleChangeHolidays = this.handleChangeHolidays.bind(this);\n    this.setStartDate = this.setStartDate.bind(this);\n    this.generateTable = this.generateTable.bind(this);\n    this.buildRows = this.buildRows.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({target: event.target.value});\n  }\n\n  handleChangeAmount(event) {\n    this.setState({amount: event.target.value});\n  }\n\n  handleChangeHolidays(event) {\n    this.setState({holidays: event.target.value});\n  }\n\n  buildRows() {\n    const rows = [];\n\n    const range = moment.range(this.state.date, '2020-12-31');\n    const holidays = this.state.holidays.split(\"\\n\").map(d => {\n      return moment(d).format('YYYY-MM-DD');\n    })\n\n    let target = parseFloat(this.state.amount);\n    for (let day of range.by('day')) {\n      const weekday = day.weekday();\n      const format = day.format('YYYY-MM-DD');\n      if (weekday !== 6 && weekday !== 6 && !holidays.includes(format)) {\n        rows.push({date: format, target});\n\n        target = target * (this.state.target / 100) + target\n      }\n    }\n\n    return rows;\n  }\n  generateTable() {\n    const rows = this.buildRows();\n    this.setState({rows})\n  }\n\n  setStartDate(date) {\n    this.setState({date});\n  }\n\n  render () {\n    const rows = this.buildRows().map(row => (\n      <tr key={row.date}>\n        <td>{row.date}</td>\n        <td>${numberWithCommas(row.target.toFixed(2))}</td>\n      </tr>\n    ))\n    return (\n      <div className=\"App\">\n        <h1>Investment Tracker</h1>\n\n        <p>Because trading without a plan is for bozos.</p>\n  \n        <form onChange={this.generateTable}>\n          <div>\n            <label for=\"input-target\">Amount:</label> <input id=\"input-target\" value={this.state.amount} onChange={this.handleChangeAmount} type=\"text\" />\n          </div>\n          <div>\n            <label for=\"input-target\">Target:</label> <input id=\"input-target\" value={this.state.target} onChange={this.handleChange} type=\"text\" />\n          </div>\n          <div>\n            <label for=\"input-date\">Start Date:</label> <DatePicker id=\"input-date\" selected={this.state.date} onChange={date => this.setStartDate(date)} />\n          </div>\n          <div>\n            <label for=\"input-holidays\">Public Holidays (Default Nasdaq 2020):</label> <textarea id=\"input-holidays\" rows=\"11\" value={this.state.holidays} onChange={this.handleChangeHolidays} />\n          </div>\n        </form>\n        <p>Trading days: {rows.length}</p>\n        <table>\n          <thead>\n            <tr>\n              <th>Date</th>\n              <th>Target</th>\n            </tr>\n          </thead>\n          <tbody>\n            {rows}\n          </tbody>\n        </table>\n  \n        <small>Created by <a href=\"https://fivetwentysix.com\">@fivetwentysix</a></small>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}